<div class="row justify-content-center">
    <div class="col-lg-8 col-md-10">
        <h1 class="section-title text-center mb-4">Finalizar Compra</h1>
        <div class="card admin-card form-view-container">
            <div class="card-body p-4">
                <div class="row g-5">
                    <!-- Columna de Resumen de Pedido -->
                    <div class="col-md-6">
                        <h4>Resumen del Pedido</h4>
                        <ul class="list-group list-group-flush">
                            {{#each items}}
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>{{this.nombre}} (x{{this.cantidad}})</span>
                                <strong>${{multiply this.precio_venta this.cantidad}}</strong>
                            </li>
                            {{/each}}
                        </ul>
                        <hr>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between"><span>Subtotal:</span><span>${{subtotal}}</span></li>
                            <li class="list-group-item d-flex justify-content-between"><span>IVA (15%):</span><span>${{iva}}</span></li>
                            <li class="list-group-item d-flex justify-content-between fw-bold fs-5"><span>Total a Pagar:</span><span class="text-primary">${{total}}</span></li>
                        </ul>
                    </div>
                    <!-- Columna de Pago -->
                    <div class="col-md-6">
                        <h4>Información de Pago</h4>
                        <form id="payment-form">
                            <div class="mb-3">
                                <label for="card-element" class="form-label">Tarjeta de Crédito o Débito</label>
                                <!-- Stripe Element se montará aquí -->
                                <div id="card-element" class="form-control p-3"></div>
                                <div id="card-errors" role="alert" class="text-danger mt-2 small"></div>
                            </div>
                            <button id="submit-button" class="btn btn-primary w-100 btn-lg mt-3">
                                <div class="spinner-border spinner-border-sm d-none" role="status"><span class="visually-hidden">Loading...</span></div>
                                <span class="button-text">Pagar ${{total}}</span>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const stripe = Stripe('{{stripePublishableKey}}');
        const elements = stripe.elements({ locale: 'es' });
        const cardElement = elements.create('card', {
            style: {
                base: { fontSize: '16px', color: '#32325d', '::placeholder': { color: '#aab7c4' } },
                invalid: { color: '#fa755a', iconColor: '#fa755a' }
            }
        });
        cardElement.mount('#card-element');

        const form = document.getElementById('payment-form');
        const submitButton = document.getElementById('submit-button');
        const spinner = submitButton.querySelector('.spinner-border');
        const buttonText = submitButton.querySelector('.button-text');
        const cardErrors = document.getElementById('card-errors');

        form.addEventListener('submit', async (event) => {
            event.preventDefault();
            submitButton.disabled = true;
            spinner.classList.remove('d-none');
            buttonText.classList.add('d-none');
            
            const { paymentMethod, error } = await stripe.createPaymentMethod({
                type: 'card',
                card: cardElement,
            });

            if (error) {
                cardErrors.textContent = error.message;
                submitButton.disabled = false;
                spinner.classList.add('d-none');
                buttonText.classList.remove('d-none');
            } else {
                try {
                    const response = await fetch('/create-payment-intent', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ payment_method_id: paymentMethod.id })
                    });
                    const result = await response.json();
                    if (result.error) {
                        throw new Error(result.error.message);
                    }
                    // Si el pago es exitoso
                    alert(`¡Pago exitoso! Venta #${result.ventaId} registrada.`);
                    window.location.href = '/mis-compras'; // Redirigir al historial de compras
                } catch (fetchError) {
                    cardErrors.textContent = fetchError.message;
                    submitButton.disabled = false;
                    spinner.classList.add('d-none');
                    buttonText.classList.remove('d-none');
                }
            }
        });
    });
</script>